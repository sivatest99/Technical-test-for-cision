```
1. Write a Dockerfile to run nginx version 1.19 in a container.

Choose a base image of your liking.

The build should be security conscious and ideally pass a container
image security test. [20 pts]


ANS: 
FROM nginx
RUN rm /etc/nginx/nginx.conf /etc/nginx/conf.d/default.conf
COPY content /usr/share/nginx/html
COPY conf /etc/nginx
VOLUME /var/log/nginx/log
RUN chown -R lirantal:lirantal /app
USER lirantal
CMD node index.js

```

```
2.  Write a Kubernetes StatefulSet to run the above, using persistent volume claims and
resource limits. [15 pts]

kind: StatefulSet
metadata:
  name: mysql-set
spec:
  selector:
    matchLabels:
      app: mysql
  serviceName: "mysql"
  replicas: 3
  template:
    metadata:
      labels:
        app: mysql
    spec:
      terminationGracePeriodSeconds: 10
      containers:
      - name: mysql
        image: mysql:5.7
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-store
          mountPath: /var/lib/mysql
        env:
          - name: MYSQL_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mysql-password
                key: MYSQL_ROOT_PASSWORD
  volumeClaimTemplates:
  - metadata:
      name: mysql-store
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "linode-block-storage-retain"
      resources:
        requests:
          storage: 5Gi
```

```
3. Write a simple build and deployment pipeline for the above using groovy /
Jenkinsfile, CircleCI or GitHub Actions. [15 pts]

ipeline {
    agent any 
    environment {
    DOCKERHUB_CREDENTIALS = credentials('valaxy-dockerhub')
    }
    stages { 
        stage('SCM Checkout') {
            steps{
            git 'https://github.com/ravdy/nodejs-demo.git'
            }
        }

        stage('Build docker image') {
            steps {  
                sh 'docker build -t valaxy/nodeapp:$BUILD_NUMBER .'
            }
        }
        stage('login to dockerhub') {
            steps{
                sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
            }
        }
        stage('push image') {
            steps{
                sh 'docker push valaxy/nodeapp:$BUILD_NUMBER'
            }
        }
}
post {
        always {
            sh 'docker logout'
        }
    }
}
```

```
4. Source or come up with a text manipulation problem and solve it with at least two of
awk, sed, tr and / or grep. Check the question below first though, maybe. [10pts]
```
example : cat /etc/passwd | grep string 
grep is used to find a file by using string 

Say that you want to replace the IP addresses and move all of the servers in those regions to a different subnet. 
You can use SED COMMAND for this use case.

Replacing or substituting string : Sed command is mostly used to replace the text in a file. The below simple sed command replaces the word “unix” with “linux” in the file.

$sed 's/unix/linux/' geekfile.txt

AWK : $  df- kh | awk '{print $1,$4}' to see 1,4 th row from output 

```
5. Solve the problem in question 4 using any programming language you like. [15pts]
```

```
6. Write a Terraform module that creates the following resources in IAM;
---
• -  A role, with no permissions, which can be assumed by users within the same account,
• -  A policy, allowing users / entities to assume the above role,
• -  A group, with the above policy attached,
• -  A user, belonging to the above group.
All four entities should have the same name, or be similarly named in some meaningful way given the
context e.g. prod-ci-role, prod-ci-policy, prod-ci-group, prod-ci-user; or just prod-ci. Make the suffixes
toggleable, if you like. [25pts]


  module "iam-user" {
    source                  = "clouddrove/iam-user/aws"
    version                 = "1.3.0"
    name                    = "iam-user"
    environment             = "test"
    label_order             = ["name","environment"]
    policy_enabled          = true
    policy                  = data.aws_iam_policy_document.default.json
    password_length         = 20
    password_reset_required = true
  }  
    resource "aws_iam_role" "test_role" {
    name = "test_role"
 } 
    resource "aws_iam_access_key" "lb" {
    user = aws_iam_user.lb.name
}

    resource "aws_iam_group" "developers" {
    name = "developers"
    path = "/users/"
 } 
    data "aws_iam_policy_document" "default" {
    statement {
      actions = [
        "ec2:Describe*"
      ]
      effect    = "Allow"
      resources = ["*"]
     }
   } 
} 
```
